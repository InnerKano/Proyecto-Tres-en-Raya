{"ast":null,"code":"import { reactive, ref } from 'vue';\nexport default {\n  setup() {\n    // Declaración de variables reactivas\n    const cells = reactive([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n    let currentPlayer = \"X\"; // Jugador actual (puede ser \"X\" o \"O\")\n    let gameOver = false; // Indica si el juego ha terminado\n    const winner = ref(\"\"); // Referencia para almacenar al ganador\n    const tie = ref(false); // Referencia para indicar empate\n\n    // Función para realizar una jugada\n    const makeMove = index => {\n      // Verifica si el juego aún no ha terminado y la celda está vacía\n      if (!winner.value && !tie.value && cells[index] === \"\") {\n        cells[index] = currentPlayer; // Asigna el jugador actual a la celda\n        checkWinner(); // Verifica si hay un ganador\n        currentPlayer = currentPlayer === \"X\" ? \"O\" : \"X\"; // Cambia de jugador\n      }\n    };\n\n    // Función para verificar si hay un ganador\n    const checkWinner = () => {\n      // Patrones de victoria en el juego\n      const winPatterns = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n      // Filas\n      [0, 3, 6], [1, 4, 7], [2, 5, 8],\n      // Columnas\n      [0, 4, 8], [2, 4, 6] // Diagonales\n      ];\n      // Itera sobre los patrones de victoria\n      for (let pattern of winPatterns) {\n        const [a, b, c] = pattern;\n        // Verifica si las celdas en el patrón son iguales y no están vacías\n        if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\n          winner.value = cells[a]; // Establece al ganador\n          return;\n        }\n      }\n      // Si no hay ganador y todas las celdas están llenas, se declara empate\n      if (!cells.includes(\"\")) {\n        tie.value = true;\n      }\n    };\n    const reset = () => {\n      // Reinicia todas las celdas y las variables relacionadas con el juego\n      cells.forEach((cell, index) => {\n        cells[index] = \"\";\n      });\n      winner.value = \"\";\n      tie.value = false;\n      currentPlayer = \"X\"; // Reinicia el jugador actual\n    };\n\n    // Retorna las variables y funciones para ser usadas en el template\n    return {\n      cells,\n      makeMove,\n      winner,\n      tie,\n      resetAllComponents\n    };\n  }\n};","map":{"version":3,"names":["reactive","ref","setup","cells","currentPlayer","gameOver","winner","tie","makeMove","index","value","checkWinner","winPatterns","pattern","a","b","c","includes","reset","forEach","cell","resetAllComponents"],"sources":["C:\\Users\\kanok\\OneDrive\\Documents\\GitHub\\Curso_BackEnd_Javascript\\Tres_en_Raya_vue\\src\\components\\C01.vue"],"sourcesContent":["<!-- COMPONENTE 1: FUNCIONAMIENTO JUEGO -->\r\n\r\n<template>\r\n    <div id=\"grid_game\" class=\"text-primary\">\r\n        <!-- Botones para cada celda del juego -->\r\n        <button id=\"C1\" class=\"btn-custom\" @click=\"makeMove(0)\">{{ cells[0] }}</button>\r\n        <button id=\"C2\" class=\"btn-custom\" @click=\"makeMove(1)\">{{ cells[1] }}</button>\r\n        <button id=\"C3\" class=\"btn-custom\" @click=\"makeMove(2)\">{{ cells[2] }}</button>\r\n        <button id=\"C4\" class=\"btn-custom\" @click=\"makeMove(3)\">{{ cells[3] }}</button>\r\n        <button id=\"C5\" class=\"btn-custom\" @click=\"makeMove(4)\">{{ cells[4] }}</button>\r\n        <button id=\"C6\" class=\"btn-custom\" @click=\"makeMove(5)\">{{ cells[5] }}</button>\r\n        <button id=\"C7\" class=\"btn-custom\" @click=\"makeMove(6)\">{{ cells[6] }}</button>\r\n        <button id=\"C8\" class=\"btn-custom\" @click=\"makeMove(7)\">{{ cells[7] }}</button>\r\n        <button id=\"C9\" class=\"btn-custom\" @click=\"makeMove(8)\">{{ cells[8] }}</button>\r\n                \r\n        <!-- Alerta de ganador -->\r\n        <div v-if=\"winner\" class=\"alert alert-primary\" role=\"alert\">\r\n            ¡{{ winner }} ha ganado!\r\n        </div>\r\n\r\n        <!-- Alerta de empate -->\r\n        <div v-if=\"tie\" class=\"alert alert-primary\" role=\"alert\">\r\n            ¡Empate!\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive, ref } from 'vue';\r\n\r\nexport default {\r\n    setup() {\r\n        // Declaración de variables reactivas\r\n        const cells = reactive([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n        let currentPlayer = \"X\"; // Jugador actual (puede ser \"X\" o \"O\")\r\n        let gameOver = false; // Indica si el juego ha terminado\r\n        const winner = ref(\"\"); // Referencia para almacenar al ganador\r\n        const tie = ref(false); // Referencia para indicar empate\r\n\r\n        // Función para realizar una jugada\r\n        const makeMove = (index) => {\r\n            // Verifica si el juego aún no ha terminado y la celda está vacía\r\n            if (!winner.value && !tie.value && cells[index] === \"\") {\r\n                cells[index] = currentPlayer; // Asigna el jugador actual a la celda\r\n                checkWinner(); // Verifica si hay un ganador\r\n                currentPlayer = currentPlayer === \"X\" ? \"O\" : \"X\"; // Cambia de jugador\r\n            }\r\n        };\r\n\r\n        // Función para verificar si hay un ganador\r\n        const checkWinner = () => {\r\n            // Patrones de victoria en el juego\r\n            const winPatterns = [\r\n                [0, 1, 2], [3, 4, 5], [6, 7, 8], // Filas\r\n                [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columnas\r\n                [0, 4, 8], [2, 4, 6] // Diagonales\r\n            ];\r\n            // Itera sobre los patrones de victoria\r\n            for (let pattern of winPatterns) {\r\n                const [a, b, c] = pattern;\r\n                // Verifica si las celdas en el patrón son iguales y no están vacías\r\n                if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\r\n                    winner.value = cells[a]; // Establece al ganador\r\n                    return;\r\n                }\r\n            }\r\n            // Si no hay ganador y todas las celdas están llenas, se declara empate\r\n            if (!cells.includes(\"\")) {\r\n                tie.value = true;\r\n            }\r\n        };\r\n        const reset = () => {\r\n            // Reinicia todas las celdas y las variables relacionadas con el juego\r\n            cells.forEach((cell, index) => {\r\n                cells[index] = \"\";\r\n            });\r\n            winner.value = \"\";\r\n            tie.value = false;\r\n            currentPlayer = \"X\"; // Reinicia el jugador actual\r\n        };\r\n\r\n        // Retorna las variables y funciones para ser usadas en el template\r\n        return { cells, makeMove, winner, tie, resetAllComponents};\r\n    }\r\n\r\n\r\n};\r\n</script>\r\n\r\n\r\n<style>\r\n    .alert {\r\n        padding: 10px;\r\n        margin-top: 20px;\r\n        border-radius: 5px;\r\n        font-size: 18px;\r\n    }\r\n    * {\r\n        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n    }\r\n\r\n    /* Celda 1: Colum1 Fil1 */\r\n    #grid_game { \r\n        width: 50%;\r\n        height: 100%;\r\n        margin: 0 auto;\r\n        display: grid;\r\n        grid-gap: 0px;\r\n        grid-template-columns: repeat(3, 1fr);\r\n        grid-template-rows: repeat(3, 1fr);\r\n        grid-template-areas:                       \r\n            \"C1 C2 C3\"\r\n            \"C4 C5 C6\"\r\n            \"C7 C8 C9\"\r\n            \"AL AL AL\";\r\n        align-items: center;\r\n        justify-items: center;\r\n        text-align: center;\r\n    }\r\n    /* BORDES  DE LAS CELDAS */\r\n\r\n    /* CELDAS */\r\n    #C1 {\r\n        grid-area: C1;\r\n    }\r\n    #C2 {\r\n        grid-area: C2;\r\n        border-left: 10px solid blueviolet;\r\n        border-right: 10px solid blueviolet;\r\n    }\r\n    #C3 {\r\n        grid-area: C3;\r\n    }\r\n    #C4 {\r\n        grid-area: C4;\r\n        border-top: 10px solid blueviolet;\r\n        border-bottom: 10px solid  blueviolet;\r\n        \r\n    }\r\n    #C5 {\r\n        grid-area: C5;\r\n        border: 10px solid blueviolet;\r\n    }\r\n    #C6 {\r\n        grid-area: C6;\r\n        border-top: 10px solid blueviolet;\r\n        border-bottom: 10px solid blueviolet;\r\n    }\r\n    #C7 {\r\n        grid-area: C7;\r\n    }\r\n    #C8 {\r\n        grid-area: C8;\r\n        border-left: 10px solid blueviolet;\r\n        border-right: 10px solid  blueviolet;\r\n    }\r\n    #C9 {\r\n        grid-area: C9;\r\n    }\r\n\r\n    h2{\r\n        grid-area: H2;\r\n    }\r\n    /* Botones X y O */\r\n    .btn-custom {\r\n        /* Cambiar la fuente */\r\n        font-family: \"Henny Penny\", cursive;\r\n        /* Cambiar el tamaño de la fuente */\r\n        text-shadow: -1px -1px 0px #0042889f,\r\n            1px 1px 1px #004b9b9f,\r\n            0.5px 0.5px 0px #00000055;\r\n        font-size: 170%;\r\n        /* Cambiar el color del texto */\r\n        color: #ffffffc7;\r\n        /* Cambiar el color de fondo */\r\n        background-color: #007bff9f;\r\n        /* Añadir bordes redondeados */\r\n        border-radius: 5px;\r\n        /* Cambiar el espaciado alrededor del texto */\r\n        padding: 10px 20px;\r\n\r\n        /* Transición suave al pasar el ratón */\r\n        transition: all 0.3s ease;\r\n        font-weight: bold;\r\n        text-align: center;\r\n        margin: 5px;\r\n        min-width: 80px; /* Establece un ancho mínimo */\r\n        min-height: 100px; /* Establece un alto mínimo */\r\n        width: 100%; /* Ancho preestablecido */\r\n        height: 100%; /* Alto preestablecido */ \r\n        border-style: none;\r\n    }\r\n    .btn-custom:focus {\r\n        /* Quitar el contorno al enfocar */\r\n        outline: none;\r\n        /* Agregar sombra al enfocar */\r\n        box-shadow: 0 0 0 0.2rem rgba(0, 47, 255, 0.25);\r\n    }\r\n\r\n    button:hover {\r\n        background-color: #0030b4ce;\r\n        border-radius: 10%;\r\n    }\r\n\r\n    button:focus {\r\n        outline: none;\r\n    }\r\n\r\n    .alert {\r\n        padding: 10px;\r\n        margin-top: 20px;\r\n        border-radius: 5px;\r\n        font-size: 18px;\r\n        grid-area: AL;\r\n        text-align: center;\r\n    }\r\n\r\n</style>"],"mappings":"AA4BA,SAASA,QAAQ,EAAEC,GAAE,QAAS,KAAK;AAEnC,eAAe;EACXC,KAAKA,CAAA,EAAG;IACJ;IACA,MAAMC,KAAI,GAAIH,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC5D,IAAII,aAAY,GAAI,GAAG,EAAE;IACzB,IAAIC,QAAO,GAAI,KAAK,EAAE;IACtB,MAAMC,MAAK,GAAIL,GAAG,CAAC,EAAE,CAAC,EAAE;IACxB,MAAMM,GAAE,GAAIN,GAAG,CAAC,KAAK,CAAC,EAAE;;IAExB;IACA,MAAMO,QAAO,GAAKC,KAAK,IAAK;MACxB;MACA,IAAI,CAACH,MAAM,CAACI,KAAI,IAAK,CAACH,GAAG,CAACG,KAAI,IAAKP,KAAK,CAACM,KAAK,MAAM,EAAE,EAAE;QACpDN,KAAK,CAACM,KAAK,IAAIL,aAAa,EAAE;QAC9BO,WAAW,CAAC,CAAC,EAAE;QACfP,aAAY,GAAIA,aAAY,KAAM,GAAE,GAAI,GAAE,GAAI,GAAG,EAAE;MACvD;IACJ,CAAC;;IAED;IACA,MAAMO,WAAU,GAAIA,CAAA,KAAM;MACtB;MACA,MAAMC,WAAU,GAAI,CAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAE;MACjC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAE;MACjC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;MAAA,CACxB;MACD;MACA,KAAK,IAAIC,OAAM,IAAKD,WAAW,EAAE;QAC7B,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,IAAIH,OAAO;QACzB;QACA,IAAIV,KAAK,CAACW,CAAC,KAAKX,KAAK,CAACW,CAAC,MAAMX,KAAK,CAACY,CAAC,KAAKZ,KAAK,CAACW,CAAC,MAAMX,KAAK,CAACa,CAAC,CAAC,EAAE;UAC5DV,MAAM,CAACI,KAAI,GAAIP,KAAK,CAACW,CAAC,CAAC,EAAE;UACzB;QACJ;MACJ;MACA;MACA,IAAI,CAACX,KAAK,CAACc,QAAQ,CAAC,EAAE,CAAC,EAAE;QACrBV,GAAG,CAACG,KAAI,GAAI,IAAI;MACpB;IACJ,CAAC;IACD,MAAMQ,KAAI,GAAIA,CAAA,KAAM;MAChB;MACAf,KAAK,CAACgB,OAAO,CAAC,CAACC,IAAI,EAAEX,KAAK,KAAK;QAC3BN,KAAK,CAACM,KAAK,IAAI,EAAE;MACrB,CAAC,CAAC;MACFH,MAAM,CAACI,KAAI,GAAI,EAAE;MACjBH,GAAG,CAACG,KAAI,GAAI,KAAK;MACjBN,aAAY,GAAI,GAAG,EAAE;IACzB,CAAC;;IAED;IACA,OAAO;MAAED,KAAK;MAAEK,QAAQ;MAAEF,MAAM;MAAEC,GAAG;MAAEc;IAAkB,CAAC;EAC9D;AAGJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}