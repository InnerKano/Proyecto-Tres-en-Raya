{"ast":null,"code":"import { ref, defineComponent } from 'vue';\nexport default defineComponent({\n  name: 'C02',\n  emits: ['resetGame'],\n  // Declara el evento personalizado\n\n  setup() {\n    const jugador1 = ref('');\n    const jugador2 = ref('');\n    const resetComponents = () => {\n      jugador1.value = '';\n      jugador2.value = '';\n      // Emite el evento de reset para que el Componente 1 lo capture\n      this.$emit('resetGame');\n    };\n    return {\n      jugador1,\n      jugador2,\n      resetComponents\n    };\n  }\n});","map":{"version":3,"names":["ref","defineComponent","name","emits","setup","jugador1","jugador2","resetComponents","value","$emit"],"sources":["C:\\Users\\kanok\\OneDrive\\Documents\\GitHub\\Curso_BackEnd_Javascript\\Tres_en_Raya_vue\\src\\components\\C02.vue"],"sourcesContent":["<!-- COMPONENTE 2: UI-->\r\n<!-- nombre archivo: C02.vue -->\r\n<template>\r\n    <div id=\"grid_C02\">\r\n      <h2>Registro de Partida</h2>\r\n      <form @submit.prevent=\"registrarPartida\">\r\n        <section>\r\n            <div id=\"player1\" class=\"coolinput\">\r\n                <label for=\"input\" class=\"text\">Jugador 1:</label>\r\n                <input type=\"text\" id=\"jugador1\" v-model=\"jugador1\" name=\"input\" class=\"input\">\r\n            </div>\r\n            <div id=\"player2\" class=\"coolinput\">\r\n                <label for=\"input\" class=\"text\">Jugador 2:</label>\r\n                <input type=\"text\" id=\"jugador2\"  v-model=\"jugador2\" name=\"input\" class=\"input\">\r\n            </div>\r\n        </section>\r\n\r\n        <button id=\"start\" type=\"submit\">Iniciar Partida</button>\r\n\r\n        <!-- BotÃ³n de reset -->\r\n        <button id=\"reset\" @click=\"resetComponents\">Reset</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, defineComponent } from 'vue';\r\n  \r\n  export default defineComponent({\r\n    name: 'C02',\r\n    emits: ['resetGame'], // Declara el evento personalizado\r\n  \r\n    setup() {\r\n      const jugador1 = ref('');\r\n      const jugador2 = ref('');\r\n  \r\n      const resetComponents = () => {\r\n        jugador1.value = '';\r\n        jugador2.value = '';\r\n        // Emite el evento de reset para que el Componente 1 lo capture\r\n        this.$emit('resetGame');\r\n      };\r\n  \r\n      return {\r\n        jugador1,\r\n        jugador2,\r\n        resetComponents,\r\n      };\r\n    },\r\n  });\r\n  </script>\r\n  \r\n  \r\n  <style scoped>\r\n     /* GRID */\r\n    #grid_C02 { \r\n        width: 100%;\r\n        height:50%; \r\n        margin: 0 auto;\r\n        display: grid;\r\n        grid-gap: 0px;\r\n        grid-template-columns: repeat(1, 1fr);\r\n        grid-template-rows: repeat(1, 1fr);\r\n        grid-template-areas:  \r\n            \"H2 H2\"                     \r\n            \"S S\"\r\n            \"ST ST\"\r\n            \"RT RT\";\r\n        align-items: center;\r\n        justify-items: center;\r\n        text-align: center;\r\n        \r\n    }\r\n    h2{\r\n        grid-area: H2;\r\n        font-family: \"Henny Penny\", cursive;\r\n    }\r\n    section{\r\n        grid-area: S;\r\n        margin-bottom: 10px;\r\n        display: flex;\r\n        justify-items: center;\r\n    }\r\n    #player1{\r\n        grid-area: P1;\r\n    }\r\n    #player1{\r\n        grid-area: P2;\r\n    }\r\n    #start{\r\n        grid-area: ST;\r\n    }\r\n    #reset{\r\n        grid-area: RT;\r\n    }\r\n/* Styles inputs jugador */\r\n    .coolinput {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: fit-content;\r\n    position: static;\r\n    max-width: 240px;\r\n    }\r\n\r\n    .coolinput label.text {\r\n    font-size: 0.75rem;\r\n    color: #818CF8;\r\n    font-weight: 700;\r\n    position: relative;\r\n    top: 0.5rem;\r\n    margin: 0 0 0 7px;\r\n    padding: 0 3px;\r\n    background: #e8e8e8e3;\r\n    border-radius: 5px;\r\n    width: fit-content;\r\n    }\r\n\r\n    .coolinput input[type=text].input {\r\n    padding: 11px 10px;\r\n    font-size: 0.75rem;\r\n    border: 2px #818CF8 solid;\r\n    border-radius: 5px;\r\n    background: #e8e8e8;\r\n    }\r\n\r\n    .coolinput input[type=text].input:focus {\r\n    outline: none;\r\n    }\r\n\r\n\r\n  .registro-partida {\r\n    max-width: 400px;\r\n    margin: auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  .input-group {\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  input[type=\"text\"] {\r\n    width: 100%;\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  button {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 10px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  </style>"],"mappings":"AA0BE,SAASA,GAAG,EAAEC,eAAc,QAAS,KAAK;AAE1C,eAAeA,eAAe,CAAC;EAC7BC,IAAI,EAAE,KAAK;EACXC,KAAK,EAAE,CAAC,WAAW,CAAC;EAAE;;EAEtBC,KAAKA,CAAA,EAAG;IACN,MAAMC,QAAO,GAAIL,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMM,QAAO,GAAIN,GAAG,CAAC,EAAE,CAAC;IAExB,MAAMO,eAAc,GAAIA,CAAA,KAAM;MAC5BF,QAAQ,CAACG,KAAI,GAAI,EAAE;MACnBF,QAAQ,CAACE,KAAI,GAAI,EAAE;MACnB;MACA,IAAI,CAACC,KAAK,CAAC,WAAW,CAAC;IACzB,CAAC;IAED,OAAO;MACLJ,QAAQ;MACRC,QAAQ;MACRC;IACF,CAAC;EACH;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}