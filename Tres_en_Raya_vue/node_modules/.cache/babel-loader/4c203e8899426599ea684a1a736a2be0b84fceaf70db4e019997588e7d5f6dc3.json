{"ast":null,"code":"import { ref } from 'vue';\nimport C01 from '@/components/C01.vue';\nimport C02 from '@/components/C02.vue';\nexport default {\n  components: {\n    C01,\n    C02\n  },\n  setup() {\n    // Datos de los jugadores\n    const jugador1 = ref('');\n    const jugador2 = ref('');\n\n    // Método para registrar la partida\n    const registrarPartida = () => {\n      // Aquí puedes implementar la lógica para enviar los datos a tu backend mediante una petición HTTP (por ejemplo, utilizando Axios)\n      console.log('Jugador 1:', jugador1.value);\n      console.log('Jugador 2:', jugador2.value);\n    };\n\n    // Método para reiniciar el formulario\n    const reset = () => {\n      jugador1.value = ''; // Reinicia el valor del jugador 1\n      jugador2.value = ''; // Reinicia el valor del jugador 2\n    };\n\n    // Método para reiniciar el componente C01\n    const resetC01 = () => {\n      if (this.$refs.c01Component) {\n        this.$refs.c01Component.reset();\n      }\n    };\n\n    // Método para reiniciar el componente C02\n    const resetC02 = () => {\n      if (this.$refs.c02Component) {\n        this.$refs.c02Component.reset();\n      }\n    };\n\n    // Método para reiniciar ambos componentes\n    const resetComponents = () => {\n      resetC01();\n      resetC02();\n    };\n\n    // Monta el componente y luego reinicia los componentes\n    onMounted(() => {\n      resetComponents();\n    });\n    return {\n      jugador1,\n      jugador2,\n      registrarPartida,\n      reset\n    };\n  }\n};","map":{"version":3,"names":["ref","C01","C02","components","setup","jugador1","jugador2","registrarPartida","console","log","value","reset","resetC01","$refs","c01Component","resetC02","c02Component","resetComponents","onMounted"],"sources":["C:\\Users\\kanok\\OneDrive\\Documents\\GitHub\\Curso_BackEnd_Javascript\\Tres_en_Raya_vue\\src\\components\\C02.vue"],"sourcesContent":["<!-- COMPONENTE 2: UI-->\r\n<!-- nombre archivo: C02.vue -->\r\n<template>\r\n    <div id=\"grid_C02\">\r\n      <h2>Registro de Partida</h2>\r\n      <form @submit.prevent=\"registrarPartida\">\r\n        <section>\r\n            <div id=\"player1\" class=\"coolinput\">\r\n                <label for=\"input\" class=\"text\">Jugador 1:</label>\r\n                <input type=\"text\" id=\"jugador1\" v-model=\"jugador1\" name=\"input\" class=\"input\">\r\n            </div>\r\n            <div id=\"player2\" class=\"coolinput\">\r\n                <label for=\"input\" class=\"text\">Jugador 2:</label>\r\n                <input type=\"text\" id=\"jugador2\"  v-model=\"jugador2\" name=\"input\" class=\"input\">\r\n            </div>\r\n        </section>\r\n\r\n        <button id=\"start\" type=\"submit\">Iniciar Partida</button>\r\n\r\n        <button id=\"\" @click=\"resetComponents\">Reset</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref } from 'vue';\r\n  import C01 from '@/components/C01.vue'\r\n  import C02 from '@/components/C02.vue'\r\n\r\n  export default {\r\n    components: {\r\n        C01,\r\n        C02,\r\n    },\r\n\r\n\r\n    setup() {\r\n      // Datos de los jugadores\r\n      const jugador1 = ref('');\r\n      const jugador2 = ref('');\r\n  \r\n      // Método para registrar la partida\r\n      const registrarPartida = () => {\r\n        // Aquí puedes implementar la lógica para enviar los datos a tu backend mediante una petición HTTP (por ejemplo, utilizando Axios)\r\n        console.log('Jugador 1:', jugador1.value);\r\n        console.log('Jugador 2:', jugador2.value);\r\n      };\r\n\r\n      // Método para reiniciar el formulario\r\n      const reset = () => {\r\n          jugador1.value = ''; // Reinicia el valor del jugador 1\r\n          jugador2.value = ''; // Reinicia el valor del jugador 2\r\n      };\r\n\r\n          // Método para reiniciar el componente C01\r\n      const resetC01 = () => {\r\n        if (this.$refs.c01Component) {\r\n          this.$refs.c01Component.reset();\r\n        }\r\n      };\r\n\r\n      // Método para reiniciar el componente C02\r\n      const resetC02 = () => {\r\n        if (this.$refs.c02Component) {\r\n          this.$refs.c02Component.reset();\r\n        }\r\n      };\r\n\r\n      \r\n      // Método para reiniciar ambos componentes\r\n      const resetComponents = () => {\r\n        resetC01();\r\n        resetC02();\r\n      };\r\n\r\n      // Monta el componente y luego reinicia los componentes\r\n      onMounted(() => {\r\n        resetComponents();\r\n      });\r\n\r\n\r\n\r\n  \r\n      return {\r\n        jugador1,\r\n        jugador2,\r\n        registrarPartida,\r\n        reset\r\n      };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n     /* GRID */\r\n    #grid_C02 { \r\n        width: 100%;\r\n        height:50%; \r\n        margin: 0 auto;\r\n        display: grid;\r\n        grid-gap: 0px;\r\n        grid-template-columns: repeat(1, 1fr);\r\n        grid-template-rows: repeat(1, 1fr);\r\n        grid-template-areas:  \r\n            \"H2 H2\"                     \r\n            \"S S\"\r\n            \"ST ST\";\r\n        align-items: center;\r\n        justify-items: center;\r\n        text-align: center;\r\n        \r\n    }\r\n    h2{\r\n        grid-area: H2;\r\n        font-family: \"Henny Penny\", cursive;\r\n    }\r\n    section{\r\n        grid-area: S;\r\n        margin-bottom: 10px;\r\n        display: flex;\r\n        justify-items: center;\r\n    }\r\n    #player1{\r\n        grid-area: P1;\r\n    }\r\n    #player1{\r\n        grid-area: P2;\r\n    }\r\n    #start{\r\n        grid-area: ST;\r\n    }\r\n/* Styles inputs jugador */\r\n    .coolinput {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: fit-content;\r\n    position: static;\r\n    max-width: 240px;\r\n    }\r\n\r\n    .coolinput label.text {\r\n    font-size: 0.75rem;\r\n    color: #818CF8;\r\n    font-weight: 700;\r\n    position: relative;\r\n    top: 0.5rem;\r\n    margin: 0 0 0 7px;\r\n    padding: 0 3px;\r\n    background: #e8e8e8e3;\r\n    border-radius: 5px;\r\n    width: fit-content;\r\n    }\r\n\r\n    .coolinput input[type=text].input {\r\n    padding: 11px 10px;\r\n    font-size: 0.75rem;\r\n    border: 2px #818CF8 solid;\r\n    border-radius: 5px;\r\n    background: #e8e8e8;\r\n    }\r\n\r\n    .coolinput input[type=text].input:focus {\r\n    outline: none;\r\n    }\r\n\r\n\r\n  .registro-partida {\r\n    max-width: 400px;\r\n    margin: auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  .input-group {\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  input[type=\"text\"] {\r\n    width: 100%;\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  button {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 10px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  </style>"],"mappings":"AAyBE,SAASA,GAAE,QAAS,KAAK;AACzB,OAAOC,GAAE,MAAO,sBAAqB;AACrC,OAAOC,GAAE,MAAO,sBAAqB;AAErC,eAAe;EACbC,UAAU,EAAE;IACRF,GAAG;IACHC;EACJ,CAAC;EAGDE,KAAKA,CAAA,EAAG;IACN;IACA,MAAMC,QAAO,GAAIL,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMM,QAAO,GAAIN,GAAG,CAAC,EAAE,CAAC;;IAExB;IACA,MAAMO,gBAAe,GAAIA,CAAA,KAAM;MAC7B;MACAC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,QAAQ,CAACK,KAAK,CAAC;MACzCF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,QAAQ,CAACI,KAAK,CAAC;IAC3C,CAAC;;IAED;IACA,MAAMC,KAAI,GAAIA,CAAA,KAAM;MAChBN,QAAQ,CAACK,KAAI,GAAI,EAAE,EAAE;MACrBJ,QAAQ,CAACI,KAAI,GAAI,EAAE,EAAE;IACzB,CAAC;;IAEG;IACJ,MAAME,QAAO,GAAIA,CAAA,KAAM;MACrB,IAAI,IAAI,CAACC,KAAK,CAACC,YAAY,EAAE;QAC3B,IAAI,CAACD,KAAK,CAACC,YAAY,CAACH,KAAK,CAAC,CAAC;MACjC;IACF,CAAC;;IAED;IACA,MAAMI,QAAO,GAAIA,CAAA,KAAM;MACrB,IAAI,IAAI,CAACF,KAAK,CAACG,YAAY,EAAE;QAC3B,IAAI,CAACH,KAAK,CAACG,YAAY,CAACL,KAAK,CAAC,CAAC;MACjC;IACF,CAAC;;IAGD;IACA,MAAMM,eAAc,GAAIA,CAAA,KAAM;MAC5BL,QAAQ,CAAC,CAAC;MACVG,QAAQ,CAAC,CAAC;IACZ,CAAC;;IAED;IACAG,SAAS,CAAC,MAAM;MACdD,eAAe,CAAC,CAAC;IACnB,CAAC,CAAC;IAKF,OAAO;MACLZ,QAAQ;MACRC,QAAQ;MACRC,gBAAgB;MAChBI;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}